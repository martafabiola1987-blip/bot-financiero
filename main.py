import requests
import sqlite3
import os
import logging
import time
from datetime import datetime, timedelta
from flask import Flask, request, jsonify

logging.basicConfig(level=logging.INFO)

class TrendoBrokerBot:
    def __init__(self):
        # üîê CONFIGURACI√ìN PRINCIPAL - 100% AUTOM√ÅTICO
        self.telegram_token = '8395866366:AAGP751UY-V49BJ4gXEuqT3PwuPPGxI_2Lo'
        self.trust_wallet = "TLTM2kgsMEqbkzxLp34pGYsbw87gt33kFg"
        self.admins = [8110866676]  # Solo para notificaciones internas
        self.minimo_retiro = 10
        
        # üéØ GRUPO DE USUARIOS (ACTUALIZAR CON EL ID REAL)
        self.grupo_usuarios_id = -1003146959942  # ‚ö†Ô∏è CAMBIAR CON EL ID REAL DEL GRUPO
        
        # üìä CONFIGURACI√ìN FINANCIERA
        self.planes = {
            "B√°sico": {"monto": 15, "ganancia": 0.20},
            "Standard": {"monto": 30, "ganancia": 0.20},
            "Premium": {"monto": 60, "ganancia": 0.20},
            "VIP": {"monto": 100, "ganancia": 0.20},
            "Plata": {"monto": 200, "ganancia": 0.20},
            "Oro": {"monto": 300, "ganancia": 0.20}
        }

        self.ganancia_diaria = 0.20 / 30

        self.telegram_api_url = f"https://api.telegram.org/bot{self.telegram_token}"
        self.user_sessions = {}
        self.init_database()

    def init_database(self):
        """Inicializar base de datos"""
        self.conn = sqlite3.connect('trendo_broker.db', check_same_thread=False)
        self.cursor = self.conn.cursor()

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS usuarios (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance REAL DEFAULT 0.0,
                balance_ganancias REAL DEFAULT 0.0,
                total_invertido REAL DEFAULT 0.0,
                total_ganado REAL DEFAULT 0.0,
                referido_por INTEGER,
                fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                bono_referidos BOOLEAN DEFAULT FALSE,
                cuentas_referidas INTEGER DEFAULT 0,
                preguntas_soporte INTEGER DEFAULT 0,
                estado TEXT DEFAULT 'activo'
            )
        ''')

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS soporte_tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                pregunta TEXT,
                categoria TEXT,
                respuesta_automatica BOOLEAN DEFAULT FALSE,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # üÜï NUEVA TABLA PARA RETIROS
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS retiros_pendientes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                monto REAL,
                wallet TEXT,
                estado TEXT DEFAULT 'pendiente',
                fecha_solicitud TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_procesado TIMESTAMP NULL
            )
        ''')

        # üÜï NUEVA TABLA PARA INVERSIONES ACTIVAS
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS inversiones_activas (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                plan TEXT,
                monto REAL,
                ganancia_diaria REAL,
                fecha_inicio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_vencimiento TIMESTAMP,
                estado TEXT DEFAULT 'activa',
                ultima_ganancia TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # üÜï NUEVA TABLA PARA GANANCIAS DIARIAS
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS ganancias_diarias (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                inversi√≥n_id INTEGER,
                monto_ganancia REAL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # üÜï NUEVA TABLA PARA COMPROBANTES DE PAGO
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS comprobantes_pago (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                plan TEXT,
                monto REAL,
                comprobante_texto TEXT,
                estado TEXT DEFAULT 'pendiente',
                fecha_solicitud TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_verificacion TIMESTAMP NULL
            )
        ''')

        self.conn.commit()
        logging.info("‚úÖ Base de datos inicializada")

    # üÜï SISTEMA DE NOTIFICACIONES DE RETIROS
    def notificar_retiro_admin(self, user_id, username, monto, wallet):
        """Notificar a todos los admins sobre un nuevo retiro pendiente"""
        mensaje_admin = f"""
üö® **NUEVO RETIRO SOLICITADO - PAGO MANUAL REQUERIDO**

üë§ **Usuario:** @{username} (ID: {user_id})
üí∞ **Monto a pagar:** {monto:.2f} USDT
üìß **Wallet destino:** `{wallet}`
‚è∞ **Solicitado:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üí° **Recuerda:** Debes enviar el pago manualmente a la wallet indicada.

üìã **Estado:** ‚è≥ PENDIENTE DE PAGO

üîß *Usa /retiros para ver todos los retiros pendientes*
        """
        
        # Notificar a todos los admins
        for admin_id in self.admins:
            self.send_message(admin_id, mensaje_admin)
        
        # Registrar en la base de datos
        self.cursor.execute(
            "INSERT INTO retiros_pendientes (user_id, username, monto, wallet) VALUES (?, ?, ?, ?)",
            (user_id, username, monto, wallet)
        )
        self.conn.commit()
        
        logging.info(f"üö® Notificaci√≥n de retiro enviada a admins - User: {username}, Monto: {monto} USDT")

    # üÜï SISTEMA DE NOTIFICACIONES DE INVERSIONES
    def notificar_inversion_admin(self, user_id, username, plan, monto):
        """Notificar a admins sobre nueva inversi√≥n solicitada"""
        mensaje_admin = f"""
üö® **NUEVA INVERSI√ìN SOLICITADA - VERIFICACI√ìN REQUERIDA**

üë§ **Usuario:** @{username} (ID: {user_id})
üìã **Plan:** {plan}
üí∞ **Monto:** {monto} USDT
üìà **Ganancia mensual:** {monto * 0.20:.2f} USDT
‚è∞ **Solicitado:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üí° **Acci√≥n requerida:**
1. Verificar pago en blockchain
2. Usar /activar_inversion para activar
3. Notificar al usuario

üìã **Estado:** ‚è≥ PENDIENTE DE VERIFICACI√ìN
        """
        
        for admin_id in self.admins:
            self.send_message(admin_id, mensaje_admin)
        
        logging.info(f"üö® Notificaci√≥n de inversi√≥n enviada - User: {username}, Plan: {plan}")

    # üÜï MANEJAR SOLICITUD DE INVERSI√ìN
    def handle_invertir(self, chat_id, user_id, username):
        """Mostrar men√∫ interactivo de planes de inversi√≥n"""
        try:
            # Crear teclado inline con los planes
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üí∞ B√°sico - 15 USDT", "callback_data": "plan_B√°sico"}],
                    [{"text": "üíé Standard - 30 USDT", "callback_data": "plan_Standard"}],
                    [{"text": "üöÄ Premium - 60 USDT", "callback_data": "plan_Premium"}],
                    [{"text": "üëë VIP - 100 USDT", "callback_data": "plan_VIP"}],
                    [{"text": "ü•à Plata - 200 USDT", "callback_data": "plan_Plata"}],
                    [{"text": "ü•á Oro - 300 USDT", "callback_data": "plan_Oro"}]
                ]
            }
            
            mensaje = """
üìä **PLANES DE INVERSI√ìN - SELECCIONA UNO** üí∞

üìà **Rendimiento autom√°tico:** 20% mensual
üí° **Ganancias autom√°ticas cada 24h**

üëá **Elige tu plan de inversi√≥n:**
            """
            
            self.send_message(chat_id, mensaje, reply_markup=keyboard)
            
        except Exception as e:
            logging.error(f"Error en men√∫ de inversi√≥n: {e}")
            self.send_message(chat_id, "‚ùå Error al cargar planes de inversi√≥n. Usa /soporte")

    # üÜï PROCESAR SELECCI√ìN DE PLAN
    def handle_seleccion_plan(self, chat_id, user_id, username, plan_seleccionado):
        """Procesar la selecci√≥n de un plan de inversi√≥n"""
        try:
            if plan_seleccionado in self.planes:
                plan_data = self.planes[plan_seleccionado]
                monto = plan_data["monto"]
                ganancia_mensual = monto * plan_data["ganancia"]
                ganancia_diaria = monto * self.ganancia_diaria
                
                # Guardar en sesi√≥n
                self.user_sessions[user_id] = {
                    "plan_seleccionado": plan_seleccionado,
                    "monto_inversion": monto,
                    "esperando_comprobante": True
                }
                
                mensaje = f"""
ü§ñ **CONFIRMACI√ìN DE INVERSI√ìN** üí∞

üìã **Plan seleccionado:** {plan_seleccionado}
üí∞ **Monto de inversi√≥n:** {monto} USDT
üìà **Rendimiento mensual:** 20% (+{ganancia_mensual:.2f} USDT)
üí∏ **Ganancia diaria:** +{ganancia_diaria:.2f} USDT

üìß **Wallet para enviar:**
`{self.trust_wallet}`

üí° **Instrucciones importantes:**
1. Env√≠a EXACTAMENTE {monto} USDT a la wallet arriba
2. Aseg√∫rate de usar la red TRC20 (TRON)
3. Guarda el comprobante de la transacci√≥n
4. Responde a este mensaje con "He enviado"
5. Adjunta el screenshot del comprobante

‚è∞ **Tu inversi√≥n se activar√° en 1-2 horas** despu√©s de la verificaci√≥n

üîê *Transacciones 100% seguras y verificadas*
                """
                
                self.send_message(chat_id, mensaje)
                
            else:
                self.send_message(chat_id, "‚ùå Plan no v√°lido. Usa /invertir para ver los planes disponibles")
                
        except Exception as e:
            logging.error(f"Error en selecci√≥n de plan: {e}")
            self.send_message(chat_id, "‚ùå Error al procesar la selecci√≥n. Usa /soporte")

    # üÜï ACTIVAR INVERSI√ìN (SOLO ADMINS)
    def activar_inversion(self, chat_id, user_id, username, plan, monto):
        """Activar una inversi√≥n despu√©s de verificar el pago"""
        try:
            # Calcular fechas
            fecha_inicio = datetime.now()
            fecha_vencimiento = fecha_inicio + timedelta(days=30)
            ganancia_diaria = monto * self.ganancia_diaria
            
            # Registrar inversi√≥n activa
            self.cursor.execute('''
                INSERT INTO inversiones_activas 
                (user_id, username, plan, monto, ganancia_diaria, fecha_vencimiento)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, username, plan, monto, ganancia_diaria, fecha_vencimiento))
            
            # Actualizar estad√≠sticas del usuario
            self.cursor.execute('''
                UPDATE usuarios 
                SET total_invertido = total_invertido + ? 
                WHERE user_id = ?
            ''', (monto, user_id))
            
            # Marcar comprobante como verificado
            self.cursor.execute('''
                UPDATE comprobantes_pago 
                SET estado = 'verificado', fecha_verificacion = CURRENT_TIMESTAMP
                WHERE user_id = ? AND estado = 'pendiente'
            ''', (user_id,))
            
            self.conn.commit()
            
            # Notificar al usuario
            mensaje_usuario = f"""
‚úÖ **¬°INVERSI√ìN ACTIVADA EXITOSAMENTE!** üéâ

üìã **Plan:** {plan}
üí∞ **Inversi√≥n:** {monto} USDT
üìà **Ganancia mensual:** {monto * 0.20:.2f} USDT
üí∏ **Ganancia diaria:** +{ganancia_diaria:.2f} USDT
‚è∞ **Fecha de inicio:** {fecha_inicio.strftime('%Y-%m-%d')}
üìÖ **Vencimiento:** {fecha_vencimiento.strftime('%Y-%m-%d')}

üéØ **Pr√≥xima ganancia:** En 24 horas
üíº **Ver estado:** /mis_inversiones

¬°Felicidades! Tu inversi√≥n est√° ahora activa y generando ganancias autom√°ticamente.
            """
            
            self.send_message(chat_id, mensaje_usuario)
            logging.info(f"‚úÖ Inversi√≥n activada - User: {username}, Plan: {plan}, Monto: {monto}")
            
        except Exception as e:
            logging.error(f"Error activando inversi√≥n: {e}")
            self.send_message(chat_id, "‚ùå Error al activar la inversi√≥n")

    # üÜï MOSTRAR INVERSIONES DEL USUARIO
    def handle_mis_inversiones(self, chat_id, user_id):
        """Mostrar las inversiones activas del usuario"""
        try:
            self.cursor.execute('''
                SELECT plan, monto, ganancia_diaria, fecha_inicio, fecha_vencimiento, estado
                FROM inversiones_activas 
                WHERE user_id = ? AND estado = 'activa'
            ''', (user_id,))
            
            inversiones = self.cursor.fetchall()
            
            if inversiones:
                mensaje = "üìä **TUS INVERSIONES ACTIVAS** üí∞\n\n"
                total_invertido = 0
                total_ganancia_diaria = 0
                
                for inversion in inversiones:
                    plan, monto, ganancia_diaria, fecha_inicio, fecha_vencimiento, estado = inversion
                    total_invertido += monto
                    total_ganancia_diaria += ganancia_diaria
                    
                    dias_restantes = (datetime.strptime(fecha_vencimiento, '%Y-%m-%d %H:%M:%S') - datetime.now()).days
                    
                    mensaje += f"""
üìã **Plan:** {plan}
üí∞ **Invertido:** {monto} USDT
üí∏ **Ganancia diaria:** +{ganancia_diaria:.2f} USDT
‚è∞ **D√≠as restantes:** {dias_restantes} d√≠as
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
                
                mensaje += f"\nüíµ **Total invertido:** {total_invertido:.2f} USDT"
                mensaje += f"\nüìà **Ganancia diaria total:** +{total_ganancia_diaria:.2f} USDT"
                mensaje += f"\nüéØ **Inversiones activas:** {len(inversiones)}"
                
            else:
                mensaje = """
üì≠ **No tienes inversiones activas**

üí° **Para empezar a invertir:**
1. Usa /invertir para ver los planes
2. Selecciona tu plan preferido
3. Sigue las instrucciones de pago

üöÄ **¬°Comienza a generar ganancias hoy mismo!**
                """
                
            self.send_message(chat_id, mensaje)
            
        except Exception as e:
            logging.error(f"Error mostrando inversiones: {e}")
            self.send_message(chat_id, "‚ùå Error al cargar tus inversiones. Usa /soporte")

    # üÜï CALCULAR GANANCIAS DIARIAS (se ejecutar√≠a autom√°ticamente)
    def calcular_ganancias_diarias(self):
        """Calcular y distribuir ganancias diarias autom√°ticamente"""
        try:
            # Obtener todas las inversiones activas
            self.cursor.execute('''
                SELECT id, user_id, username, monto, ganancia_diaria 
                FROM inversiones_activas 
                WHERE estado = 'activa'
            ''')
            
            inversiones = self.cursor.fetchall()
            
            for inversion in inversiones:
                inv_id, user_id, username, monto, ganancia_diaria = inversion
                
                # Registrar ganancia
                self.cursor.execute('''
                    INSERT INTO ganancias_diarias (user_id, inversi√≥n_id, monto_ganancia)
                    VALUES (?, ?, ?)
                ''', (user_id, inv_id, ganancia_diaria))
                
                # Actualizar balance del usuario
                self.cursor.execute('''
                    UPDATE usuarios 
                    SET balance_ganancias = balance_ganancias + ?, 
                        total_ganado = total_ganado + ?,
                        balance = balance + ?
                    WHERE user_id = ?
                ''', (ganancia_diaria, ganancia_diaria, ganancia_diaria, user_id))
                
                # Actualizar √∫ltima ganancia
                self.cursor.execute('''
                    UPDATE inversiones_activas 
                    SET ultima_ganancia = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (inv_id,))
                
                logging.info(f"üí∞ Ganancia diaria aplicada - User: {username}, Monto: {ganancia_diaria:.2f} USDT")
            
            self.conn.commit()
            
        except Exception as e:
            logging.error(f"Error calculando ganancias diarias: {e}")

    def handle_retiros_pendientes(self, chat_id, user_id):
        """Mostrar retiros pendientes solo para administradores"""
        if user_id not in self.admins:
            self.send_message(chat_id, "‚ùå No tienes permisos de administrador")
            return
        
        try:
            self.cursor.execute('''
                SELECT user_id, username, monto, wallet, fecha_solicitud 
                FROM retiros_pendientes 
                WHERE estado = 'pendiente'
                ORDER BY fecha_solicitud DESC
            ''')
            retiros = self.cursor.fetchall()
            
            if retiros:
                mensaje = "üìã **RETIROS PENDIENTES - PAGOS MANUALES REQUERIDOS**\n\n"
                total_pendiente = 0
                
                for retiro in retiros:
                    user_id_retiro, username, monto, wallet, fecha = retiro
                    total_pendiente += monto
                    
                    mensaje += f"""
üë§ **Usuario:** @{username} (ID: {user_id_retiro})
üí∞ **Monto:** {monto:.2f} USDT
üìß **Wallet:** `{wallet}`
‚è∞ **Solicitado:** {fecha}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
                
                mensaje += f"\nüíµ **TOTAL PENDIENTE:** {total_pendiente:.2f} USDT"
                mensaje += f"\nüë• **Retiros pendientes:** {len(retiros)}"
                
            else:
                mensaje = "‚úÖ **No hay retiros pendientes en este momento**"
                
            self.send_message(chat_id, mensaje)
            
        except Exception as e:
            logging.error(f"Error en retiros pendientes: {e}")
            self.send_message(chat_id, "‚ùå Error al cargar retiros pendientes")

    # üéØ SISTEMA DE SOPORTE AUTOM√ÅTICO (existente)
    def analizar_pregunta(self, texto):
        """Analizar pregunta y encontrar respuesta autom√°tica"""
        texto = texto.lower().strip()
        
        soporte_automatico = {
            "retiro": {
                "palabras": ["retiro", "retirar", "sacar dinero", "cuando me pagan", "tiempo de retiro", "wallet", "pago"],
                "respuesta": """üí∏ **INFORMACI√ìN DE RETIROS - AUTOM√ÅTICO**

‚è∞ **Tiempo de procesamiento:** 24-48 horas
üí∞ **M√≠nimo de retiro:** 10 USDT
üìß **Wallet para invertir:** `TLTM2kgsMEqbkzxLp34pGYsbw87gt33kFg`
üîê **Seguridad:** 100% garantizada

ü§ñ *Sistema autom√°tico - Tu retiro se procesar√° en el tiempo establecido*"""
            },
            "inversion": {
                "palabras": ["invertir", "inversi√≥n", "planes", "ganancias", "rendimiento", "ganar dinero", "plan", "wallet", "donde env√≠o"],
                "respuesta": """üìä **PLANES DE INVERSI√ìN - AUTOM√ÅTICO**

üìà **Rendimiento:** 20% mensual
üí∞ **Ganancias:** Autom√°ticas cada 24h
üîê **Seguridad:** Garantizada
üíº **Planes desde:** 15 USDT

üìß **Wallet para invertir:**
`TLTM2kgsMEqbkzxLp34pGYsbw87gt33kFg`

üí° *Usa* /invertir *para seleccionar tu plan*

ü§ñ *Sistema 100% automatizado*"""
            },
            "referidos": {
                "palabras": ["referido", "referidos", "compartir", "enlace", "bono", "amigo", "recomendar"],
                "respuesta": """üë• **SISTEMA DE REFERIDOS - AUTOM√ÅTICO**

üéÅ **Bono especial:** 5 USDT al llegar a 5 referidos
üí∏ **Comisi√≥n permanente:** 10% de sus inversiones
üöÄ **Ganancia ilimitada:** Sin tope m√°ximo

üîó *Usa* /referidos *para obtener tu enlace personalizado*

ü§ñ *Sistema de referidos completamente autom√°tico*"""
            }
        }
        
        for categoria, datos in soporte_automatico.items():
            for palabra in datos["palabras"]:
                if palabra in texto:
                    return datos["respuesta"], categoria
        
        return None, None

    def manejar_soporte_inteligente(self, chat_id, user_id, username, pregunta):
        """Manejar sistema de soporte 100% autom√°tico"""
        try:
            # Efecto de typing
            self.send_chat_action(chat_id, "typing")
            time.sleep(1.5)

            # Buscar respuesta autom√°tica
            respuesta, categoria = self.analizar_pregunta(pregunta)
            
            if respuesta:
                # Registrar como resuelto autom√°ticamente
                self.cursor.execute(
                    "INSERT INTO soporte_tickets (user_id, username, pregunta, categoria, respuesta_automatica) VALUES (?, ?, ?, ?, ?)",
                    (user_id, username, pregunta, categoria, True)
                )
                
                self.cursor.execute(
                    "UPDATE usuarios SET preguntas_soporte = preguntas_soporte + 1 WHERE user_id = ?",
                    (user_id,)
                )
                
                self.conn.commit()
                
                return respuesta
            else:
                # Pregunta no reconocida - respuesta gen√©rica autom√°tica
                self.cursor.execute(
                    "INSERT INTO soporte_tickets (user_id, username, pregunta, respuesta_automatica) VALUES (?, ?, ?, ?)",
                    (user_id, username, pregunta, False)
                )
                
                self.conn.commit()

                return f"""
‚ùì **CONSULTA REGISTRADA AUTOM√ÅTICAMENTE**

üìù *"{pregunta}"*

ü§ñ **Respuesta autom√°tica:**
No encontr√© una respuesta espec√≠fica autom√°tica para tu pregunta.

üí° **Puedes intentar con:**
‚Ä¢ "¬øC√≥mo retirar dinero?"
‚Ä¢ "¬øQu√© planes de inversi√≥n hay?"
‚Ä¢ "¬øC√≥mo funcionan los referidos?"

üîß *Nuestro sistema autom√°tico aprender√° de tu pregunta para mejorar*
"""

        except Exception as e:
            logging.error(f"Error en soporte autom√°tico: {e}")
            return "‚ö†Ô∏è **Sistema de soporte autom√°tico temporalmente no disponible**\n\nPor favor, intenta nuevamente en 5 minutos."

    # üéØ PUBLICAR EN GRUPO
    def publicar_en_grupo(self, mensaje):
        """Publicar mensaje en el grupo de usuarios"""
        try:
            if self.grupo_usuarios_id:
                self.send_message(self.grupo_usuarios_id, mensaje)
                logging.info(f"‚úÖ Mensaje publicado en grupo: {self.grupo_usuarios_id}")
        except Exception as e:
            logging.error(f"‚ùå Error publicando en grupo: {e}")

    def publicar_retiro_exitoso(self, user_id, username, monto, wallet):
        """Publicar retiro exitoso en el grupo"""
        mensaje = f"""
üí∏ **RETIRO VERIFICADO - EXITOSO** ‚úÖ

üë§ **Usuario:** @{username}
üí∞ **Monto:** {monto:.2f} USDT
üìß **Wallet:** {wallet}
‚è∞ **Tiempo:** Procesado autom√°ticamente
üìã **Estado:** ‚úÖ COMPLETADO

üéâ *¬°Retiro procesado autom√°ticamente!*
üîó *√önete a nuestro bot:* @TrendoBrokerBot

ü§ñ *Sistema 100% automatizado*
        """
        self.publicar_en_grupo(mensaje)

    # üîß M√âTODOS B√ÅSICOS
    def send_message(self, chat_id, text, reply_markup=None):
        """Enviar mensaje a Telegram"""
        url = f"{self.telegram_api_url}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        if reply_markup:
            payload['reply_markup'] = reply_markup

        try:
            response = requests.post(url, json=payload, timeout=10)
            return response.json()
        except Exception as e:
            logging.error(f"‚ùå Error enviando mensaje: {e}")
            return None

    def send_chat_action(self, chat_id, action):
        """Enviar acci√≥n de chat"""
        url = f"{self.telegram_api_url}/sendChatAction"
        payload = {'chat_id': chat_id, 'action': action}
        try:
            requests.post(url, json=payload, timeout=5)
        except:
            pass

    # üé® M√âTODOS PRINCIPALES
    def handle_start(self, chat_id, username, user_id, parametros=None):
        """Comando start - 100% autom√°tico"""
        try:
            self.cursor.execute(
                "INSERT OR IGNORE INTO usuarios (user_id, username) VALUES (?, ?)",
                (user_id, username)
            )

            if parametros and parametros.isdigit():
                referido_por = int(parametros)
                if referido_por != user_id:
                    self.cursor.execute(
                        "UPDATE usuarios SET referido_por = ? WHERE user_id = ?",
                        (referido_por, user_id)
                    )

            self.conn.commit()

            welcome_text = f"""
ü§ñ **TRENDO BROKER BOT** üí∞

üéâ **¬°Bienvenido {username}!**

üíé **SISTEMA 100% AUTOMATIZADO:**
‚Ä¢ ü§ñ Soporte autom√°tico 24/7
‚Ä¢ üí∞ Ganancias autom√°ticas diarias
‚Ä¢ üéÅ Bonos por referidos autom√°ticos
‚Ä¢ üîê Retiros autom√°ticos y seguros

üìß **Wallet para invertir:**
`TLTM2kgsMEqbkzxLp34pGYsbw87gt33kFg`

üöÄ **COMANDOS AUTOM√ÅTICOS:**

/invertir - Seleccionar plan de inversi√≥n
/mis_inversiones - Ver inversiones activas
/balance - Consultar balance autom√°ticamente
/retirar - Solicitar retiro autom√°tico
/referidos - Sistema de referidos autom√°tico
/soporte - Centro de ayuda autom√°tico

üí° **¬øNecesitas ayuda?** Escribe cualquier pregunta y nuestro sistema autom√°tico te asistir√° inmediatamente.

ü§ñ *Sistema 100% automatizado - Sin intervenci√≥n humana*
            """

            self.send_message(chat_id, welcome_text)

        except Exception as e:
            logging.error(f"Error en start: {e}")
            self.send_message(chat_id, "‚ùå Error autom√°tico al iniciar. Escribe /soporte para ayuda autom√°tica.")

    def handle_soporte(self, chat_id, user_id, username, mensaje=None):
        """Manejar sistema de soporte 100% autom√°tico"""
        if mensaje:
            # Procesar pregunta espec√≠fica
            respuesta = self.manejar_soporte_inteligente(chat_id, user_id, username, mensaje)
            self.send_message(chat_id, respuesta)
        else:
            # Mostrar men√∫ de soporte autom√°tico
            soporte_text = f"""
üé´ **CENTRO DE SOPORTE AUTOM√ÅTICO 24/7** ü§ñ

üí° **Soporte 100% Autom√°tico Instant√°neo:**
Escribe tu pregunta y te responder√© autom√°ticamente.

üöÄ **√Åreas de Ayuda Autom√°tica:**

‚Ä¢ üí∏ *"¬øC√≥mo retiro mi dinero autom√°ticamente?"*
‚Ä¢ üìä *"¬øQu√© planes de inversi√≥n autom√°ticos hay?"*  
‚Ä¢ üë• *"¬øC√≥mo funcionan los referidos autom√°ticos?"*
‚Ä¢ üõ°Ô∏è *"¬øEs seguro el sistema autom√°tico?"*
‚Ä¢ ‚è∞ *"¬øTiempos de retiro autom√°ticos?"*

ü§ñ **Sistema 100% automatizado**
**¬°Escribe tu pregunta ahora!**
            """
            self.send_message(chat_id, soporte_text)

    def handle_balance(self, chat_id, user_id):
        """Mostrar balance autom√°ticamente"""
        try:
            self.cursor.execute(
                "SELECT balance, balance_ganancias, total_invertido, total_ganado FROM usuarios WHERE user_id = ?",
                (user_id,)
            )
            resultado = self.cursor.fetchone()
            
            if resultado:
                balance, ganancias, invertido, total_ganado = resultado
                
                mensaje = f"""
üíº **BALANCE COMPLETO - AUTOM√ÅTICO**

üí∞ **Saldo disponible:** {balance:.2f} USDT
üìà **Ganancias acumuladas:** {ganancias:.2f} USDT
üíµ **Total invertido:** {invertido:.2f} USDT
üèÜ **Total ganado:** {total_ganado:.2f} USDT

üí∏ **M√≠nimo de retiro autom√°tico:** {self.minimo_retiro} USDT

ü§ñ *Las ganancias se acreditan autom√°ticamente cada 24 horas*
                """
            else:
                mensaje = "‚ùå Primero debes registrarte. Usa /start"
                
            self.send_message(chat_id, mensaje)
            
        except Exception as e:
            logging.error(f"Error en balance: {e}")
            self.send_message(chat_id, "‚ùå Error autom√°tico al cargar balance. Usa /soporte para ayuda autom√°tica.")

    def handle_retirar(self, chat_id, user_id):
        """Manejar solicitud de retiro autom√°tico"""
        try:
            self.cursor.execute("SELECT balance, username FROM usuarios WHERE user_id = ?", (user_id,))
            resultado = self.cursor.fetchone()
            
            if resultado and resultado[0] >= self.minimo_retiro:
                self.user_sessions[user_id] = {
                    "esperando_wallet": True,
                    "monto_retiro": resultado[0],
                    "username": resultado[1]
                }
                
                mensaje = f"""
üí∏ **SOLICITUD DE RETIRO AUTOM√ÅTICO**

üí∞ **Saldo disponible:** {resultado[0]:.2f} USDT
üìã **M√≠nimo requerido:** {self.minimo_retiro} USDT

üìß **Env√≠a tu wallet USDT (TRC20) para procesamiento autom√°tico:**

üí° *Ejemplo:* `TLTM2kgsMEqbkzxLp34pGYsbw87gt33kFg`

‚è∞ **Tiempo de procesamiento autom√°tico:** 24-48 horas
üîê **Transacciones autom√°ticas y seguras**

ü§ñ *Sistema 100% automatizado*
                """
            elif resultado:
                mensaje = f"""
‚ùå **SALDO INSUFICIENTE - AUTOM√ÅTICO**

üí∞ **Tu saldo actual:** {resultado[0]:.2f} USDT
üìã **M√≠nimo requerido:** {self.minimo_retiro} USDT

üí° *Necesitas al menos {self.minimo_retiro} USDT para retiro autom√°tico*
                """
            else:
                mensaje = "‚ùå No tienes saldo disponible para retiro autom√°tico"
                
            self.send_message(chat_id, mensaje)
            
        except Exception as e:
            logging.error(f"Error en retiro: {e}")
            self.send_message(chat_id, "‚ö†Ô∏è Error temporal en sistema autom√°tico de retiros. Usa /soporte.")

    def handle_referidos(self, chat_id, user_id):
        """Sistema de referidos autom√°tico"""
        try:
            self.cursor.execute("SELECT cuentas_referidas, bono_referidos FROM usuarios WHERE user_id = ?", (user_id,))
            resultado = self.cursor.fetchone()
            
            referidos = resultado[0] if resultado else 0
            bono_activado = resultado[1] if resultado else False
            
            mensaje = f"""
üë• **SISTEMA DE REFERIDOS AUTOM√ÅTICO**

üìä **Tus referidos actuales:** {referidos}
üéØ **Objetivo para bono autom√°tico:** 5 referidos
üéÅ **Bono autom√°tico al completar:** 5 USDT

"""
            
            if bono_activado:
                mensaje += "‚úÖ **¬°BONO AUTOM√ÅTICO ACTIVADO!** +5 USDT\n\n"
            else:
                faltan = max(0, 5 - referidos)
                mensaje += f"üìà **Progreso autom√°tico:** {referidos}/5 referidos\n"
                if faltan > 0:
                    mensaje += f"üéÅ **Faltan {faltan} referidos** para bono autom√°tico\n\n"

            mensaje += f"""üí∏ **Comisi√≥n autom√°tica del 10%** de sus inversiones

üîó **Tu enlace autom√°tico:**
`https://t.me/TrendoBrokerBot?start={user_id}`

ü§ñ *Sistema de referidos 100% automatizado*
            """
                
            self.send_message(chat_id, mensaje)
            
        except Exception as e:
            logging.error(f"Error en referidos: {e}")
            self.send_message(chat_id, "‚ùå Error autom√°tico. Usa /soporte.")

    def handle_estadisticas(self, chat_id, user_id):
        """Mostrar estad√≠sticas solo para administradores"""
        if user_id not in self.admins:
            self.send_message(chat_id, "‚ùå No tienes permisos de administrador")
            return
        
        try:
            # Obtener estad√≠sticas de la base de datos
            self.cursor.execute("""
                SELECT 
                    COUNT(*) as total_usuarios,
                    SUM(balance) as total_balance,
                    SUM(balance_ganancias) as total_ganancias,
                    SUM(total_invertido) as total_invertido,
                    SUM(total_ganado) as total_ganado_total,
                    SUM(cuentas_referidas) as total_referidos,
                    SUM(preguntas_soporte) as total_soporte
                FROM usuarios
            """)
            stats = self.cursor.fetchone()
            
            # Obtener inversiones activas
            self.cursor.execute("SELECT COUNT(*) FROM inversiones_activas WHERE estado = 'activa'")
            inversiones_activas = self.cursor.fetchone()[0]
            
            # Obtener retiros pendientes
            self.cursor.execute("SELECT COUNT(*), SUM(monto) FROM retiros_pendientes WHERE estado = 'pendiente'")
            retiros_pendientes = self.cursor.fetchone()
            total_retiros_pendientes = retiros_pendientes[0] or 0
            total_monto_pendiente = retiros_pendientes[1] or 0

            # Obtener inversiones pendientes
            self.cursor.execute("SELECT COUNT(*) FROM comprobantes_pago WHERE estado = 'pendiente'")
            inversiones_pendientes = self.cursor.fetchone()[0] or 0
            
            if stats:
                total_usuarios, total_balance, total_ganancias, total_invertido, total_ganado, total_referidos, total_soporte = stats
                
                mensaje = f"""
üìä **PANEL DE ADMINISTRADOR** üîê

üë• **USUARIOS:**
‚Ä¢ Total registrados: {total_usuarios}
‚Ä¢ Con inversiones activas: {inversiones_activas}
‚Ä¢ Referidos totales: {total_referidos or 0}

üí∞ **FINANZAS:**
‚Ä¢ Saldo total en sistema: {total_balance or 0:.2f} USDT
‚Ä¢ Ganancias acumuladas: {total_ganancias or 0:.2f} USDT
‚Ä¢ Total invertido: {total_invertido or 0:.2f} USDT
‚Ä¢ Total ganado hist√≥rico: {total_ganado or 0:.2f} USDT

üé´ **ACTIVIDAD:**
‚Ä¢ Consultas de soporte: {total_soporte or 0}
‚Ä¢ Retiros m√≠nimos: {self.minimo_retiro} USDT

üö® **PENDIENTES:**
‚Ä¢ Retiros pendientes: {total_retiros_pendientes}
‚Ä¢ Monto retiros pendiente: {total_monto_pendiente:.2f} USDT
‚Ä¢ Inversiones por verificar: {inversiones_pendientes}

üí° *Usa /retiros para ver detalles de retiros pendientes*

ü§ñ *Estad√≠sticas en tiempo real*
                """
            else:
                mensaje = "üìä No hay datos estad√≠sticos disponibles a√∫n."
                
            self.send_message(chat_id, mensaje)
            
        except Exception as e:
            logging.error(f"Error en estad√≠sticas: {e}")
            self.send_message(chat_id, "‚ùå Error al cargar estad√≠sticas")

    def process_update(self, update):
        """Procesar actualizaciones - 100% autom√°tico"""
        try:
            if 'message' in update and 'text' in update['message']:
                chat_id = update['message']['chat']['id']
                user_id = update['message']['from']['id']
                text = update['message']['text']
                username = update['message']['from'].get('username', 'Usuario')

                logging.info(f"üì® Mensaje autom√°tico de {username}: {text}")

                # Manejar retiros autom√°ticos
                if user_id in self.user_sessions and self.user_sessions[user_id].get('esperando_wallet'):
                    monto = self.user_sessions[user_id]['monto_retiro']
                    username = self.user_sessions[user_id]['username']
                    wallet = text
                    
                    # NOTIFICAR A ADMINS SOBRE EL RETIRO
                    self.notificar_retiro_admin(user_id, username, monto, wallet)
                    
                    # Publicar en grupo autom√°ticamente
                    self.publicar_retiro_exitoso(user_id, username, monto, wallet)
                    
                    mensaje = f"""
‚úÖ **RETIRO SOLICITADO AUTOM√ÅTICAMENTE**

üí∞ **Monto:** {monto:.2f} USDT
üìß **Wallet:** {wallet}
üìã **Estado:** En proceso autom√°tico
‚è∞ **Tiempo:** 24-48 horas autom√°ticas

üîê *Tu transacci√≥n se procesa autom√°ticamente*

ü§ñ *Sistema 100% automatizado*
                    """
                    self.send_message(chat_id, mensaje)
                    del self.user_sessions[user_id]
                    return

                # Manejar comprobantes de inversi√≥n
                if user_id in self.user_sessions and self.user_sessions[user_id].get('esperando_comprobante'):
                    if "he enviado" in text.lower():
                        plan = self.user_sessions[user_id]['plan_seleccionado']
                        monto = self.user_sessions[user_id]['monto_inversion']
                        
                        # Registrar comprobante
                        self.cursor.execute('''
                            INSERT INTO comprobantes_pago (user_id, username, plan, monto, comprobante_texto)
                            VALUES (?, ?, ?, ?, ?)
                        ''', (user_id, username, plan, monto, text))
                        self.conn.commit()
                        
                        # Notificar a admins
                        self.notificar_inversion_admin(user_id, username, plan, monto)
                        
                        mensaje = f"""
‚úÖ **COMPROBANTE REGISTRADO EXITOSAMENTE**

üìã **Plan:** {plan}
üí∞ **Monto:** {monto} USDT
‚è∞ **Solicitado:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîç **Estado:** En verificaci√≥n por nuestro equipo

üìû **Tiempo de verificaci√≥n:** 1-2 horas
üí° **Recibir√°s notificaci√≥n cuando tu inversi√≥n est√© activa**

ü§ñ *Gracias por confiar en nuestro sistema automatizado*
                        """
                        self.send_message(chat_id, mensaje)
                        del self.user_sessions[user_id]
                        return

                # Procesar comandos autom√°ticos
                if text.startswith('/start'):
                    parametros = text.split()[1] if len(text.split()) > 1 else None
                    self.handle_start(chat_id, username, user_id, parametros)
                elif text == '/balance':
                    self.handle_balance(chat_id, user_id)
                elif text == '/retirar':
                    self.handle_retirar(chat_id, user_id)
                elif text == '/referidos':
                    self.handle_referidos(chat_id, user_id)
                elif text == '/invertir':
                    self.handle_invertir(chat_id, user_id, username)
                elif text == '/mis_inversiones':
                    self.handle_mis_inversiones(chat_id, user_id)
                elif text == '/estadisticas':
                    self.handle_estadisticas(chat_id, user_id)
                elif text == '/retiros':  # NUEVO COMANDO
                    self.handle_retiros_pendientes(chat_id, user_id)
                elif text == '/soporte':
                    self.handle_soporte(chat_id, user_id, username)
                elif text.startswith('/'):
                    self.send_message(chat_id, "‚ùå Comando no reconocido autom√°ticamente. Usa /soporte")
                else:
                    # Cualquier otro mensaje = soporte autom√°tico
                    self.handle_soporte(chat_id, user_id, username, text)

            # üÜï Manejar callbacks de botones inline
            elif 'callback_query' in update:
                callback = update['callback_query']
                chat_id = callback['message']['chat']['id']
                user_id = callback['from']['id']
                username = callback['from'].get('username', 'Usuario')
                callback_data = callback['data']
                
                if callback_data.startswith('plan_'):
                    plan_seleccionado = callback_data.replace('plan_', '')
                    self.handle_seleccion_plan(chat_id, user_id, username, plan_seleccionado)
                
                # Confirmar callback
                self.answer_callback_query(callback['id'])

        except Exception as e:
            logging.error(f"‚ùå Error autom√°tico procesando update: {e}")

    def answer_callback_query(self, callback_id):
        """Responder a callback query"""
        url = f"{self.telegram_api_url}/answerCallbackQuery"
        payload = {'callback_query_id': callback_id}
        try:
            requests.post(url, json=payload, timeout=5)
        except:
            pass

# ‚úÖ CONFIGURACI√ìN FLASK
bot = TrendoBrokerBot()
app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        update = request.get_json()
        bot.process_update(update)
        return jsonify({"status": "ok"})
    
    return "ü§ñ Trendo Broker Bot - SISTEMA 100% AUTOM√ÅTICO ‚úÖ"

if __name__ == "__main__":
    logging.info("üöÄ Iniciando Trendo Broker Bot - 100% Autom√°tico...")
    
    # üÜï Calcular ganancias diarias al iniciar (simulaci√≥n)
    bot.calcular_ganancias_diarias()
    
    app.run(host='0.0.0.0', port=5000, debug=False)
